"""
Django settings for resume_website project.

Generated by 'django-admin startproject' using Django 5.0.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""
import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'sandbox.smtp.mailtrap.io'
EMAIL_PORT = 2525

EMAIL_HOST_USER_FILE = os.environ.get('EMAIL_HOST_USER_FILE', '')
EMAIL_HOST_PASSWORD_FILE = os.environ.get('EMAIL_HOST_PASSWORD_FILE', '')

# Read the contents of the secret files
if EMAIL_HOST_USER_FILE:
    with open(EMAIL_HOST_USER_FILE, 'r') as user_file:
        EMAIL_HOST_USER = user_file.read().strip()
else:
    # Fall back to regular environment variable
    EMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER', '')

if EMAIL_HOST_PASSWORD_FILE:
    with open(EMAIL_HOST_PASSWORD_FILE, 'r') as password_file:
        EMAIL_HOST_PASSWORD = password_file.read().strip()
else:
    # Fall back to regular environment variable
    EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD', '')

print(EMAIL_HOST_USER, EMAIL_HOST_PASSWORD)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/


SECRET_KEY_FILE = os.environ.get('SECRET_KEY_FILE', '')

# Read the contents of the secret files
# SECURITY WARNING: keep the secret key used in production secret!
if SECRET_KEY_FILE:
    with open(SECRET_KEY_FILE, 'r') as key_file:
        SECRET_KEY = key_file.read().strip()


# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = [
    "localhost",
    "10.0.0.44",
]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'portfolio',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'resume_website.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'resume_website.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases
POSTGRES_USER_FILE = os.environ.get('POSTGRES_USER_FILE', '')
POSTGRES_PASSWORD_FILE = os.environ.get('POSTGRES_PASSWORD_FILE', '')

# Read the contents of the secret files
if POSTGRES_USER_FILE and POSTGRES_PASSWORD_FILE:
    print("Using PostgreSQL")
    with open(POSTGRES_USER_FILE, 'r') as user_file:
        POSTGRES_USER = user_file.read().strip()

    with open(POSTGRES_PASSWORD_FILE, 'r') as pass_file:
        POSTGRES_PASSWORD = pass_file.read().strip()

    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': 'djangodb',
            'USER': POSTGRES_USER,
            'PASSWORD': POSTGRES_PASSWORD,
            'HOST': 'db',
            'PORT': '5432',
        }
    }
else:
    print("Using SQLite3")
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }

# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = '/home/cagmas/PycharmProjects/portfolio_website/portfolio/static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
